/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/hchenc/pager/pkg/apis/devops/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PagerLister helps list Pagers.
// All objects returned here must be treated as read-only.
type PagerLister interface {
	// List lists all Pagers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Pager, err error)
	// Pagers returns an object that can list and get Pagers.
	Pagers(namespace string) PagerNamespaceLister
	PagerListerExpansion
}

// pagerLister implements the PagerLister interface.
type pagerLister struct {
	indexer cache.Indexer
}

// NewPagerLister returns a new PagerLister.
func NewPagerLister(indexer cache.Indexer) PagerLister {
	return &pagerLister{indexer: indexer}
}

// List lists all Pagers in the indexer.
func (s *pagerLister) List(selector labels.Selector) (ret []*v1alpha1.Pager, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Pager))
	})
	return ret, err
}

// Pagers returns an object that can list and get Pagers.
func (s *pagerLister) Pagers(namespace string) PagerNamespaceLister {
	return pagerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PagerNamespaceLister helps list and get Pagers.
// All objects returned here must be treated as read-only.
type PagerNamespaceLister interface {
	// List lists all Pagers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Pager, err error)
	// Get retrieves the Pager from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Pager, error)
	PagerNamespaceListerExpansion
}

// pagerNamespaceLister implements the PagerNamespaceLister
// interface.
type pagerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Pagers in the indexer for a given namespace.
func (s pagerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Pager, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Pager))
	})
	return ret, err
}

// Get retrieves the Pager from the indexer for a given namespace and name.
func (s pagerNamespaceLister) Get(name string) (*v1alpha1.Pager, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pager"), name)
	}
	return obj.(*v1alpha1.Pager), nil
}
